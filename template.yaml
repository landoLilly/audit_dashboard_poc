AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM Template for DynamoDB Stream to Webhook Lambda Function'

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: nodejs18.x
    Environment:
      Variables:
        WEBHOOK_URL: !Ref WebhookUrl
        TABLE_NAME: !Ref TableName
        WEBHOOK_TIMEOUT: 10000

Parameters:
  TableName:
    Type: String
    Default: AuditEvents
    Description: Name of the DynamoDB table to monitor
  
  WebhookUrl:
    Type: String
    Default: http://host.docker.internal:4000/api/webhook/dynamodb-stream
    Description: URL of the webhook endpoint to call (use host.docker.internal for local development)
  
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # Lambda function for processing DynamoDB streams
  ProcessDynamoDBRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'ProcessDynamoDBRecords-${Environment}'
      CodeUri: lambda/
      Handler: index.handler
      Description: Processes DynamoDB streams and sends webhooks
      Environment:
        Variables:
          WEBHOOK_URL: !Ref WebhookUrl
          TABLE_NAME: !Ref TableName
          WEBHOOK_TIMEOUT: 10000
          ENVIRONMENT: !Ref Environment
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt AuditEventsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            ParallelizationFactor: 1
            MaximumRecordAgeInSeconds: 60
            BisectBatchOnFunctionError: true
            MaximumRetryAttempts: 3
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AuditEventsTable
        - DynamoDBStreamReadPolicy:
            TableName: !Ref AuditEventsTable
            StreamName: !Select [3, !Split ["/", !GetAtt AuditEventsTable.StreamArn]]

  # DynamoDB table for local testing
  AuditEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: AuditId
          AttributeType: S
        - AttributeName: EventTimestamp
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: EventType
          AttributeType: S
        - AttributeName: Source
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: SessionId
          AttributeType: S
        - AttributeName: PartitionKey
          AttributeType: S
      KeySchema:
        - AttributeName: AuditId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1-UserId-EventTimestamp
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
            - AttributeName: EventTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2-EventType-EventTimestamp
          KeySchema:
            - AttributeName: EventType
              KeyType: HASH
            - AttributeName: EventTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI3-Source-EventTimestamp
          KeySchema:
            - AttributeName: Source
              KeyType: HASH
            - AttributeName: EventTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI4-Status-EventTimestamp
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: EventTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI5-PartitionKey-EventTimestamp
          KeySchema:
            - AttributeName: PartitionKey
              KeyType: HASH
            - AttributeName: EventTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI6-SessionId-EventTimestamp
          KeySchema:
            - AttributeName: SessionId
              KeyType: HASH
            - AttributeName: EventTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: audit-dashboard

Outputs:
  ProcessDynamoDBRecordsFunctionArn:
    Description: "ProcessDynamoDBRecords Lambda Function ARN"
    Value: !GetAtt ProcessDynamoDBRecordsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProcessDynamoDBRecordsFunctionArn"

  DynamoDBTableName:
    Description: "DynamoDB table name"
    Value: !Ref AuditEventsTable
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBTableName"

  DynamoDBStreamArn:
    Description: "DynamoDB Stream ARN"
    Value: !GetAtt AuditEventsTable.StreamArn
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBStreamArn"

  WebhookUrl:
    Description: "Configured webhook URL"
    Value: !Ref WebhookUrl
    Export:
      Name: !Sub "${AWS::StackName}-WebhookUrl"
